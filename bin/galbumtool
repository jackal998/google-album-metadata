#!/usr/bin/env ruby
require "bundler/setup"

require "optparse"
require "colorize"
require_relative "../lib/g_album_tools"

options = {}
parser = OptionParser.new do |op|
  op.banner = "Usage: galbumtool -s <source_directory> -d <destination_directory> [options]"
  
  op.on("--version", "Show version") { options[:version] = true }
  op.on("--verbose", "Show verbose logs") { options[:verbose] = true }

  op.on("-s SOURCE", "--source SOURCE", "Set source path") { options[:source] = _1 }
  op.on("-d DEST", "--destination DEST", "Set destination path") { options[:destination] = _1 }

  op.on("-o", "--output", "Output the result to a file") { options[:output] = true }
  
  # New options for error handling
  op.on("--process-errors", "Process error files from a previous run") { options[:process_errors] = true }

  # Mark commented out for now as we should make it globally applicable in all features
  # op.on("--nested", "Process subdirectories when handling errors") { options[:nested] = true }
end

begin
  parser.parse!
rescue OptionParser::InvalidOption
  puts "Invalid option, please see `galbumtool -h` for help"
  puts parser.help
  exit
end

if options[:version]
  puts GAlbumTools::VERSION
elsif options[:process_errors] && options[:destination]
  # Initialize the core components needed
  logger = GAlbumTools::Logger.new(GAlbumTools::Processor::LOG_FILE, options[:verbose])
  exiftool = GAlbumTools::ExifToolWrapper.new(logger, false)
  
  # Process error files
  GAlbumTools::ErrorFilesWorker.new(
    options[:destination],
    logger,
    exiftool
  ).process
elsif options[:source] && options[:destination]
  # Normal processing
  GAlbumTools::Processor.new(
    options[:verbose],
    options[:source],
    options[:destination],
    options[:output]
  ).process
else
  puts parser.help
end
